<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppDisclaimer" xml:space="preserve">
    <value>Not affiliated with TyranoScript.</value>
  </data>
  <data name="AppLic" xml:space="preserve">
    <value>Licensed under AGPLv3-and-later.</value>
  </data>
  <data name="AppSuccess_Line1" xml:space="preserve">
    <value>The save file has been updated successfully.</value>
  </data>
  <data name="AppSuccess_Line2" xml:space="preserve">
    <value>Enjoy the unlocked contents in CG or Memory mode!</value>
  </data>
  <data name="AppSuccess_Line3" xml:space="preserve">
    <value>Unlocked CGs: {0}</value>
  </data>
  <data name="AppSuccess_Line4" xml:space="preserve">
    <value>Unlocked Replays: {0}</value>
  </data>
  <data name="ArgErrorUnknown" xml:space="preserve">
    <value>Unknown error.</value>
  </data>
  <data name="ArgInvalid" xml:space="preserve">
    <value>Invalid for arg: {0}</value>
  </data>
  <data name="ArgMissing" xml:space="preserve">
    <value>Missing required option: {0}</value>
  </data>
  <data name="ArgUnknown" xml:space="preserve">
    <value>Unknown option:</value>
  </data>
  <data name="Desc" xml:space="preserve">
    <value>{0} is a tool to unlock CGs and replays in TyranoScript-based games/visual novels by modifying the save file.</value>
  </data>
  <data name="DryModeNotice" xml:space="preserve">
    <value>Dry run mode enabled. No changes will be made to the save file.</value>
  </data>
  <data name="ErrorAsarNotFound" xml:space="preserve">
    <value>Error: .asar file path '{0}' does not exist.</value>
  </data>
  <data name="ErrorAsarSav" xml:space="preserve">
    <value>An error occurred while processing the asar or save file.</value>
  </data>
  <data name="ErrorHelpCmd" xml:space="preserve">
    <value>Try '{0} --help' for more information.</value>
  </data>
  <data name="ErrorSavNotFound" xml:space="preserve">
    <value>Error: .sav file path '{0}' does not exist.</value>
  </data>
  <data name="ExcInvalidSav" xml:space="preserve">
    <value>Invalid .sav file.</value>
  </data>
  <data name="ExcInvalidView" xml:space="preserve">
    <value>Invalid ['{0}'] in .sav file.</value>
  </data>
  <data name="FoundAsarScripts" xml:space="preserve">
    <value>Found {0} script files in asar.</value>
  </data>
  <data name="FoundCGs" xml:space="preserve">
    <value>Found {0} Unlockable CGs.</value>
  </data>
  <data name="FoundReplays" xml:space="preserve">
    <value>Found {0} Unlockable Replays.</value>
  </data>
  <data name="FoundScripts" xml:space="preserve">
    <value>Scenario scripts:</value>
  </data>
  <data name="HelpTextAsar" xml:space="preserve">
    <value>Path to the app.asar file containing the game scripts. (typically in 'resources/')</value>
  </data>
  <data name="HelpTextDesc" xml:space="preserve">
    <value>{1}Description:{1}    {0}{1}{1}Usage:{1}    tsmu [options] -a &lt;path&gt; -s &lt;path&gt;{1}{1}    &lt;path&gt; {2}{1}{1}Options:</value>
  </data>
  <data name="HelpTextDryRun" xml:space="preserve">
    <value>Dry run mode. Only show what would be done, without modifying the save file.</value>
  </data>
  <data name="HelpTextHelp" xml:space="preserve">
    <value>Displays this help screen.</value>
  </data>
  <data name="HelpTextOptPath" xml:space="preserve">
    <value>is the File's path.</value>
  </data>
  <data name="HelpTextRequired" xml:space="preserve">
    <value>&lt;Required Option&gt;</value>
  </data>
  <data name="HelpTextSav" xml:space="preserve">
    <value>Path to the sav(e) file to modify. (typically in game top folder)</value>
  </data>
  <data name="HelpTextVerbose" xml:space="preserve">
    <value>Increase verbosity. Can be stacked -vv, up to 2 levels.</value>
  </data>
  <data name="JsonExc" xml:space="preserve">
    <value>Corrupted? Is the game running fine? (!!)Delete and re-run the game(!!) ONLY IF YOU ARE SURE (!!)</value>
  </data>
  <data name="LogLine" xml:space="preserve">
    <value>=========================================================</value>
  </data>
  <data name="LogLineDone" xml:space="preserve">
    <value>======================== DONE !! ========================</value>
  </data>
  <data name="LogLineTY" xml:space="preserve">
    <value>====================== THANK YOU ! ======================</value>
  </data>
  <data name="OpenAsar" xml:space="preserve">
    <value>Opening asar file: {0}</value>
  </data>
  <data name="OpenSav" xml:space="preserve">
    <value>Opening sav file: {0}</value>
  </data>
  <data name="SavBackup" xml:space="preserve">
    <value>Backing up save file '{0}'-&gt;'{1}'</value>
  </data>
  <data name="SavBackupCancel" xml:space="preserve">
    <value>Backup cancelled because of dry run.</value>
  </data>
  <data name="SavBackupDry" xml:space="preserve">
    <value>Would backup save file '{0}'-&gt;'{1}'</value>
  </data>
  <data name="SavingSav" xml:space="preserve">
    <value>Saving changes to the save file: {0}</value>
  </data>
  <data name="SavingSavDry" xml:space="preserve">
    <value>Would write to {0}</value>
  </data>
  <data name="SavJsonParse" xml:space="preserve">
    <value>Parsing list from JSON.</value>
  </data>
  <data name="SavJsonSerialize" xml:space="preserve">
    <value>Serializing changes to JSON.</value>
  </data>
  <data name="UnlockableCGs" xml:space="preserve">
    <value>Unlockable CGs:</value>
  </data>
  <data name="UnlockableReplays" xml:space="preserve">
    <value>Unlockable Replays:</value>
  </data>
  <data name="UnlockedCGs" xml:space="preserve">
    <value>Now Unlocked {0} CGs.</value>
  </data>
  <data name="UnlockedCGsAlr" xml:space="preserve">
    <value>Already Unlocked CGs in save:</value>
  </data>
  <data name="UnlockedReplays" xml:space="preserve">
    <value>Now Unlocked {0} Replays.</value>
  </data>
  <data name="UnlockedReplaysAlr" xml:space="preserve">
    <value>Already Unlocked Replays in save:</value>
  </data>
</root>